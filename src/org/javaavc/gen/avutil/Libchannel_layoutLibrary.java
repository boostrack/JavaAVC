package org.javaavc.gen.avutil;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>Libchannel_layout</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Libchannel_layoutLibrary extends Library {
	/** enum values */
	public static interface AVMatrixEncoding {
		public static final int AV_MATRIX_ENCODING_NONE = 0;
		public static final int AV_MATRIX_ENCODING_DOLBY = 1;
		public static final int AV_MATRIX_ENCODING_DPLII = 2;
		public static final int AV_MATRIX_ENCODING_NB = 3;
	};
	public static final int AV_CH_TOP_BACK_RIGHT = 0x00020000;
	public static final int AV_CH_LAYOUT_HEXAGONAL = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000100);
	public static final int AV_CH_LAYOUT_QUAD = ((0x00000001 | 0x00000002) | 0x00000010 | 0x00000020);
	public static final int AV_CH_LAYOUT_7POINT1 = (((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000010 | 0x00000020);
	public static final int AV_CH_LAYOUT_2POINT1 = ((0x00000001 | 0x00000002) | 0x00000008);
	public static final int AV_CH_LAYOUT_7POINT0 = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000010 | 0x00000020);
	public static final int AV_CH_LAYOUT_STEREO_DOWNMIX = (0x20000000 | 0x40000000);
	public static final int AV_CH_BACK_RIGHT = 0x00000020;
	public static final int AV_CH_TOP_FRONT_LEFT = 0x00001000;
	public static final int AV_CH_TOP_FRONT_RIGHT = 0x00004000;
	public static final int AV_CH_LAYOUT_5POINT0 = (((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400);
	public static final int AV_CH_LAYOUT_5POINT1 = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008);
	public static final int AV_CH_TOP_BACK_LEFT = 0x00008000;
	public static final int AV_CH_LAYOUT_5POINT1_BACK = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008);
	public static final int AV_CH_LAYOUT_6POINT0_FRONT = (((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080);
	public static final int AV_CH_LAYOUT_STEREO = (0x00000001 | 0x00000002);
	public static final long AV_CH_SURROUND_DIRECT_RIGHT = 0x0000000400000000L;
	public static final long AV_CH_SURROUND_DIRECT_LEFT = 0x0000000200000000L;
	public static final int AV_CH_LAYOUT_7POINT1_WIDE = (((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000040 | 0x00000080);
	public static final int AV_CH_LAYOUT_MONO = (0x00000004);
	public static final int AV_CH_TOP_BACK_CENTER = 0x00010000;
	public static final int AV_CH_LAYOUT_OCTAGONAL = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000010 | 0x00000100 | 0x00000020);
	public static final int AV_CH_FRONT_CENTER = 0x00000004;
	public static final int AV_CH_BACK_LEFT = 0x00000010;
	public static final int AV_CH_SIDE_LEFT = 0x00000200;
	public static final int AV_CH_LAYOUT_SURROUND = ((0x00000001 | 0x00000002) | 0x00000004);
	public static final int AV_CH_SIDE_RIGHT = 0x00000400;
	public static final int AV_CH_LAYOUT_6POINT1_FRONT = ((((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080) | 0x00000008);
	public static final int AV_CH_STEREO_LEFT = 0x20000000;
	public static final long AV_CH_LAYOUT_NATIVE = 0x8000000000000000L;
	public static final int AV_CH_FRONT_RIGHT = 0x00000002;
	public static final int AV_CH_TOP_FRONT_CENTER = 0x00002000;
	public static final int AV_CH_BACK_CENTER = 0x00000100;
	public static final int AV_CH_FRONT_RIGHT_OF_CENTER = 0x00000080;
	public static final int AV_CH_LAYOUT_4POINT0 = (((0x00000001 | 0x00000002) | 0x00000004) | 0x00000100);
	public static final int AV_CH_LAYOUT_7POINT1_WIDE_BACK = (((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008) | 0x00000040 | 0x00000080);
	public static final int AV_CH_LAYOUT_6POINT0 = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000100);
	public static final int AV_CH_LAYOUT_7POINT0_FRONT = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000040 | 0x00000080);
	public static final int AV_CH_LAYOUT_6POINT1 = (((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000200 | 0x00000400) | 0x00000008) | 0x00000100);
	public static final int AV_CH_LOW_FREQUENCY = 0x00000008;
	public static final long AV_CH_LOW_FREQUENCY_2 = 0x0000000800000000L;
	public static final long AV_CH_WIDE_LEFT = 0x0000000080000000L;
	public static final int AV_CH_LAYOUT_4POINT1 = ((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000100) | 0x00000008);
	public static final int AV_CH_LAYOUT_6POINT1_BACK = (((((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020) | 0x00000008) | 0x00000100);
	public static final int AV_CH_FRONT_LEFT_OF_CENTER = 0x00000040;
	public static final int AV_CH_TOP_CENTER = 0x00000800;
	public static final int AV_CH_LAYOUT_2_1 = ((0x00000001 | 0x00000002) | 0x00000100);
	public static final int AV_CH_FRONT_LEFT = 0x00000001;
	public static final int AV_CH_STEREO_RIGHT = 0x40000000;
	public static final int AV_CH_LAYOUT_2_2 = ((0x00000001 | 0x00000002) | 0x00000200 | 0x00000400);
	public static final int AV_CH_LAYOUT_5POINT0_BACK = (((0x00000001 | 0x00000002) | 0x00000004) | 0x00000010 | 0x00000020);
	public static final int AV_CH_LAYOUT_3POINT1 = (((0x00000001 | 0x00000002) | 0x00000004) | 0x00000008);
	public static final long AV_CH_WIDE_RIGHT = 0x0000000100000000L;
	/**
	 * Return a channel layout id that matches name, or 0 if no match is found.<br>
	 * * name can be one or several of the following notations,<br>
	 * separated by '+' or '|':<br>
	 * - the name of an usual channel layout (mono, stereo, 4.0, quad, 5.0,<br>
	 *   5.0(side), 5.1, 5.1(side), 7.1, 7.1(wide), downmix);<br>
	 * - the name of a single channel (FL, FR, FC, LFE, BL, BR, FLC, FRC, BC,<br>
	 *   SL, SR, TC, TFL, TFC, TFR, TBL, TBC, TBR, DL, DR);<br>
	 * - a number of channels, in decimal, optionally followed by 'c', yielding<br>
	 *   the default channel layout for that number of channels (@see<br>
	 *   av_get_default_channel_layout);<br>
	 * - a channel layout mask, in hexadecimal starting with "0x" (see the<br>
	 *   AV_CH_* macros).<br>
	 * * Example: "stereo+FC" = "2+FC" = "2c+1c" = "0x7"<br>
	 * Original signature : <code>uint64_t av_get_channel_layout(const char*)</code><br>
	 * @deprecated use the safer methods {@link #av_get_channel_layout(java.lang.String)} and {@link #av_get_channel_layout(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long av_get_channel_layout(Pointer name);
	/**
	 * Return a channel layout id that matches name, or 0 if no match is found.<br>
	 * * name can be one or several of the following notations,<br>
	 * separated by '+' or '|':<br>
	 * - the name of an usual channel layout (mono, stereo, 4.0, quad, 5.0,<br>
	 *   5.0(side), 5.1, 5.1(side), 7.1, 7.1(wide), downmix);<br>
	 * - the name of a single channel (FL, FR, FC, LFE, BL, BR, FLC, FRC, BC,<br>
	 *   SL, SR, TC, TFL, TFC, TFR, TBL, TBC, TBR, DL, DR);<br>
	 * - a number of channels, in decimal, optionally followed by 'c', yielding<br>
	 *   the default channel layout for that number of channels (@see<br>
	 *   av_get_default_channel_layout);<br>
	 * - a channel layout mask, in hexadecimal starting with "0x" (see the<br>
	 *   AV_CH_* macros).<br>
	 * * Example: "stereo+FC" = "2+FC" = "2c+1c" = "0x7"<br>
	 * Original signature : <code>uint64_t av_get_channel_layout(const char*)</code>
	 */
	long av_get_channel_layout(String name);
	/**
	 * Return a description of a channel layout.<br>
	 * If nb_channels is <= 0, it is guessed from the channel_layout.<br>
	 * * @param buf put here the string containing the channel layout<br>
	 * @param buf_size size in bytes of the buffer<br>
	 * Original signature : <code>void av_get_channel_layout_string(char*, int, int, uint64_t)</code><br>
	 * @deprecated use the safer methods {@link #av_get_channel_layout_string(java.nio.ByteBuffer, int, int, long)} and {@link #av_get_channel_layout_string(com.sun.jna.Pointer, int, int, long)} instead
	 */
	@Deprecated 
	void av_get_channel_layout_string(Pointer buf, int buf_size, int nb_channels, long channel_layout);
	/**
	 * Return a description of a channel layout.<br>
	 * If nb_channels is <= 0, it is guessed from the channel_layout.<br>
	 * * @param buf put here the string containing the channel layout<br>
	 * @param buf_size size in bytes of the buffer<br>
	 * Original signature : <code>void av_get_channel_layout_string(char*, int, int, uint64_t)</code>
	 */
	void av_get_channel_layout_string(ByteBuffer buf, int buf_size, int nb_channels, long channel_layout);
	/**
	 * Append a description of a channel layout to a bprint buffer.<br>
	 * Original signature : <code>void av_bprint_channel_layout(AVBPrint*, int, uint64_t)</code>
	 */
	void av_bprint_channel_layout(Libchannel_layoutLibrary.AVBPrint bp, int nb_channels, long channel_layout);
	/**
	 * Return the number of channels in the channel layout.<br>
	 * Original signature : <code>int av_get_channel_layout_nb_channels(uint64_t)</code>
	 */
	int av_get_channel_layout_nb_channels(long channel_layout);
	/**
	 * Return default channel layout for a given number of channels.<br>
	 * Original signature : <code>int64_t av_get_default_channel_layout(int)</code>
	 */
	long av_get_default_channel_layout(int nb_channels);
	/**
	 * Get the index of a channel in channel_layout.<br>
	 * * @param channel a channel layout describing exactly one channel which must be<br>
	 *                present in channel_layout.<br>
	 * * @return index of channel in channel_layout on success, a negative AVERROR<br>
	 *         on error.<br>
	 * Original signature : <code>int av_get_channel_layout_channel_index(uint64_t, uint64_t)</code>
	 */
	int av_get_channel_layout_channel_index(long channel_layout, long channel);
	/**
	 * Get the channel with the given index in channel_layout.<br>
	 * Original signature : <code>uint64_t av_channel_layout_extract_channel(uint64_t, int)</code>
	 */
	long av_channel_layout_extract_channel(long channel_layout, int index);
	/**
	 * Get the name of a given channel.<br>
	 * * @return channel name on success, NULL on error.<br>
	 * Original signature : <code>char* av_get_channel_name(uint64_t)</code>
	 */
	String av_get_channel_name(long channel);
	/**
	 * Get the description of a given channel.<br>
	 * * @param channel  a channel layout with a single channel<br>
	 * @return  channel description on success, NULL on error<br>
	 * Original signature : <code>char* av_get_channel_description(uint64_t)</code>
	 */
	String av_get_channel_description(long channel);
	/**
	 * Get the value and name of a standard channel layout.<br>
	 * * @param[in]  index   index in an internal list, starting at 0<br>
	 * @param[out] layout  channel layout mask<br>
	 * @param[out] name    name of the layout<br>
	 * @return  0  if the layout exists,<br>
	 *          <0 if index is beyond the limits<br>
	 * Original signature : <code>int av_get_standard_channel_layout(unsigned, uint64_t*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #av_get_standard_channel_layout(int, java.nio.LongBuffer, java.lang.String[])} and {@link #av_get_standard_channel_layout(int, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int av_get_standard_channel_layout(int index, LongByReference layout, PointerByReference name);
	/**
	 * Get the value and name of a standard channel layout.<br>
	 * * @param[in]  index   index in an internal list, starting at 0<br>
	 * @param[out] layout  channel layout mask<br>
	 * @param[out] name    name of the layout<br>
	 * @return  0  if the layout exists,<br>
	 *          <0 if index is beyond the limits<br>
	 * Original signature : <code>int av_get_standard_channel_layout(unsigned, uint64_t*, const char**)</code>
	 */
	int av_get_standard_channel_layout(int index, LongBuffer layout, String name[]);
	public static class AVBPrint extends PointerType {
		public AVBPrint(Pointer address) {
			super(address);
		}
		public AVBPrint() {
			super();
		}
	};
}
